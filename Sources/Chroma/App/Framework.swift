//
//  Framework.swift
//  Chroma
//
//  Created by Jota Uribe on 16/10/23.
//

import Foundation
import ArgumentParser
import Files

enum Framework: String, ExpressibleByArgument {
    case AppKit
    case SwiftUI
    case UIKit
}

extension Framework {
    private static let colorAssetExtension = "colorset"
    
    var defaultValue: String {
        switch self {
        case .UIKit, .AppKit:
            return "?? .clear "
        case .SwiftUI:
            return ""
        }
    }
    
    var parameterName: String {
        switch self {
        case .UIKit, .AppKit:
            return "named: "
        case .SwiftUI:
            return ""
        }
    }
    
    var variableType: String {
        switch self {
        case .UIKit: return "UIColor"
        case .AppKit: return "NSColor"
        case .SwiftUI: return "Color"
        }
    }
    
    var systemReservedVariableNames: [String] {
        switch self {
        case .UIKit, .AppKit:
            return []
        case .SwiftUI:
            return ["accentColor"]
        }
    }
    
    func fileContent(header: String, body: String) -> String {
        """
        //
        //  Generated by Chroma.
        //  https://github.com/jjotaum/Chroma.
        //
        //  This file was auto generated please do not modify it directly.
        //
        
        import \(rawValue)
        
        \(header) {
        
        \(body)
        
        }
        """
    }
    
    func fileBody(asset: Folder) -> Array<String> {
        let assetKey = asset.nameExcludingExtension
        // Get subfolders with valid extension
        let colorSubfolders = asset.subfolders.recursive.filter { $0.extension == Self.colorAssetExtension }
        // Group them by parent name to use them as MARK's
        let parents = Dictionary(grouping: colorSubfolders, by: \.parent?.nameExcludingExtension)
        var content: [String] = []
        // Add main variables
        if let root = parents[assetKey] {
            content.append(contentsOf: colorVariableNames(folders: root))
        }
        // Sort keys to give output MARKS alphabetical order
        parents.sorted(by: { $0.key ?? "" < $1.key ?? "" }).forEach { (key, value) in
            guard key != assetKey else { return }
            if let mark = key {
                content.append("    // MARK: - \(mark)")
            }
            // Add MARK variables
            content.append(contentsOf: colorVariableNames(folders: value))
        }
        return content
    }
    
    private func colorVariableNames(folders: [Folder]) -> [String] {
        // We filter out duplicated variable names
        Set(folders.compactMap { colorFolder in
            return colorVariable(name: colorFolder.nameExcludingExtension)
        }).sorted()
    }
    
    func colorVariable(name: String) -> String? {
        let formattedName = name.camelCased().removing(.punctuationCharacters.union(.symbols))
        guard !systemReservedVariableNames.contains(formattedName) else { return nil }
        return "    static var \(formattedName): \(variableType) { return \(variableType)(\(parameterName)\"\(name)\") \(defaultValue)}"
    }
}
